{"version":3,"sources":["mapANSIEscapeCodes.js"],"names":[],"mappings":";;;;;;;;yBAA6B,YAAY;;;;AAEzC,IAAI,SAAS,YAAA,CAAC;;AAEd,SAAS,GAAG,6BAAkB,CAAC;;;;;;;;;;;;;;;qBAchB,UAAC,KAAK,EAAK;AACtB,QAAI,KAAK,YAAA;QACL,OAAO,YAAA;QACP,MAAM,YAAA,CAAC;;AAEX,UAAM,GAAG,CAAC,CAAC;AACX,WAAO,GAAG,EAAE,CAAC;;AAEb,WAAO,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,KAAM,IAAI,EAAE;AAC7C,eAAO,CAAC,IAAI,CAAC;AACT,iBAAK,EAAE,KAAK,CAAC,KAAK,GAAG,MAAM;AAC3B,gBAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACjB,CAAC,CAAC;;AAEH,cAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;KAC7B;;AAED,WAAO,OAAO,CAAC;CAClB","file":"mapANSIEscapeCodes.js","sourcesContent":["import ANSIRegexFactory from 'ansi-regex';\n\nlet ANSIRegex;\n\nANSIRegex = ANSIRegexFactory();\n\n/**\n * @typedef {Object} mapANSIEscapeCodes\n * @property {Numbex} Index of the escape code in the plain string equivalent of the input string.\n * @property {String} ANSI escape code.\n */\n\n/**\n * Produces a list of the escape codes contained in the input string.\n *\n * @param {String} input\n * @return {mapANSIEscapeCodes~code[]}\n */\nexport default (input) => {\n    let match,\n        matches,\n        offset;\n\n    offset = 0;\n    matches = [];\n\n    while ((match = ANSIRegex.exec(input)) !== null) {\n        matches.push({\n            index: match.index - offset,\n            code: match[0]\n        });\n\n        offset += match[0].length;\n    }\n\n    return matches;\n};\n"],"sourceRoot":"/source/"}